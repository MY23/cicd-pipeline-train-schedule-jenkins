# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- task: Gradle@2
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'build'

- task: ArchiveFiles@2
  displayName: 'Train Schedule Archive'
  inputs:
    archiveType: zip
    archiveFile: '$(System.DefaultWorkingDirectory)/dist/trainSchedule.zip'
    includeRootFolder: false
    replaceExistingArchive: true
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifacts'
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/dist/trainSchedule.zip'
    ArtifactName: "trainSchedule"
    PathtoPublish: '$(System.DefaultWorkingDirectory)/dist/'

#- task: CmdLine@2
#  displayName: 'Stop train-schedule service'
#  inputs:
#    script: 'sudo /usr/bin/systemctl stop train-schedule'

- task: CopyFiles@2
  displayName: 'Copy zip file'
  inputs:
   SourceFolder: '$(System.DefaultWorkingDirectory)/dist/'
   Contents: "trainSchedule.zip"
   TargetFolder: '/tmp'
   cleanTargetFolder: false
   ignoreMakeDirErrors: false

- task: ExtractFiles@1
  displayName: 'Extract project files'
  inputs:
    archiveFilePatterns: '/tmp/trainSchedule.zip' 
    destinationFolder: '/opt/train-schedule'

- task: CmdLine@2
  displayName: 'Start train-schedule service'
  inputs:
    script: 'sudo /usr/bin/systemctl start train-schedule'

#- task: DownloadPipelineArtifact@2
#  displayName: 'Download Pipeline Artifact'
#  inputs:
#      source: 'current'
#      artifact: 'drop'
#      path: '$(System.DefaultWorkingDirectory)/dist/'
#  
#- task: CopyFilesOverSSH@0
#  displayName: 'Deploy Artifact to the remote machine'
#  inputs:
#    sshEndpoint: StagingServer
#    sourceFolder: '$(System.DefaultWorkingDirectory)/dist/'
#    targetFolder: '/opt/train-schedule'
#    cleanTargetFolder: true
#    failOnEmptySource: true